// Mocks generated by Mockito 5.4.0 from annotations
// in mvvm_movie_app/test/utils/mock/mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mvvm_movie_app/data/failure.dart' as _i12;
import 'package:mvvm_movie_app/data/model/genre/genre_model.dart' as _i3;
import 'package:mvvm_movie_app/data/model/movie/movie_detail_model.dart' as _i8;
import 'package:mvvm_movie_app/data/model/movie/now_playing_model.dart' as _i4;
import 'package:mvvm_movie_app/data/model/movie/popular_movie_model.dart'
    as _i5;
import 'package:mvvm_movie_app/data/model/movie/top_rated_model.dart' as _i6;
import 'package:mvvm_movie_app/data/model/movie/up_coming_model.dart' as _i7;
import 'package:mvvm_movie_app/data/source/remote/movie_remote_source.dart'
    as _i16;
import 'package:mvvm_movie_app/domain/entity/movie/genre_entity.dart' as _i13;
import 'package:mvvm_movie_app/domain/entity/movie/movie_detail_entity.dart'
    as _i15;
import 'package:mvvm_movie_app/domain/entity/movie/movie_entity.dart' as _i14;
import 'package:mvvm_movie_app/domain/repository/movie_repository.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenreModel_1 extends _i1.SmartFake implements _i3.GenreModel {
  _FakeGenreModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNowPlayingModel_2 extends _i1.SmartFake
    implements _i4.NowPlayingModel {
  _FakeNowPlayingModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePopularModel_3 extends _i1.SmartFake implements _i5.PopularModel {
  _FakePopularModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTopRatedModel_4 extends _i1.SmartFake implements _i6.TopRatedModel {
  _FakeTopRatedModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpComingModel_5 extends _i1.SmartFake implements _i7.UpComingModel {
  _FakeUpComingModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailModel_6 extends _i1.SmartFake
    implements _i8.MovieDetailModel {
  _FakeMovieDetailModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_7 extends _i1.SmartFake implements _i9.Response {
  _FakeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i9.StreamedResponse {
  _FakeStreamedResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i10.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.GenreEntity>>> getGenres() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenres,
          [],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i13.GenreEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i13.GenreEntity>>(
          this,
          Invocation.method(
            #getGenres,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.GenreEntity>>>);
  @override
  _i11.Future<
      _i2.Either<_i12.Failure, List<_i14.MovieEntity>>> getNowPlayingMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [page],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i14.MovieEntity>>(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>);
  @override
  _i11.Future<
      _i2.Either<_i12.Failure, List<_i14.MovieEntity>>> getPopularMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [page],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i14.MovieEntity>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>);
  @override
  _i11.Future<
      _i2.Either<_i12.Failure, List<_i14.MovieEntity>>> getTopRatedMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [page],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i14.MovieEntity>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>);
  @override
  _i11.Future<
      _i2.Either<_i12.Failure, List<_i14.MovieEntity>>> getUpComingMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpComingMovies,
          [page],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i14.MovieEntity>>(
          this,
          Invocation.method(
            #getUpComingMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i14.MovieEntity>>>);
  @override
  _i11.Future<_i2.Either<_i12.Failure, _i15.MovieDetailEntity>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i15.MovieDetailEntity>>.value(
                _FakeEither_0<_i12.Failure, _i15.MovieDetailEntity>(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i15.MovieDetailEntity>>);
}

/// A class which mocks [MovieRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteSource extends _i1.Mock implements _i16.MovieRemoteSource {
  MockMovieRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i3.GenreModel> getGenres() => (super.noSuchMethod(
        Invocation.method(
          #getGenres,
          [],
        ),
        returnValue: _i11.Future<_i3.GenreModel>.value(_FakeGenreModel_1(
          this,
          Invocation.method(
            #getGenres,
            [],
          ),
        )),
      ) as _i11.Future<_i3.GenreModel>);
  @override
  _i11.Future<_i4.NowPlayingModel> getNowPlayingMovies(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [page],
        ),
        returnValue:
            _i11.Future<_i4.NowPlayingModel>.value(_FakeNowPlayingModel_2(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i4.NowPlayingModel>);
  @override
  _i11.Future<_i5.PopularModel> getPopularMovies(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [page],
        ),
        returnValue: _i11.Future<_i5.PopularModel>.value(_FakePopularModel_3(
          this,
          Invocation.method(
            #getPopularMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i5.PopularModel>);
  @override
  _i11.Future<_i6.TopRatedModel> getTopRatedMovies(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [page],
        ),
        returnValue: _i11.Future<_i6.TopRatedModel>.value(_FakeTopRatedModel_4(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i6.TopRatedModel>);
  @override
  _i11.Future<_i7.UpComingModel> getUpComingMovies(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpComingMovies,
          [page],
        ),
        returnValue: _i11.Future<_i7.UpComingModel>.value(_FakeUpComingModel_5(
          this,
          Invocation.method(
            #getUpComingMovies,
            [page],
          ),
        )),
      ) as _i11.Future<_i7.UpComingModel>);
  @override
  _i11.Future<_i8.MovieDetailModel> getMovieDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue:
            _i11.Future<_i8.MovieDetailModel>.value(_FakeMovieDetailModel_6(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i11.Future<_i8.MovieDetailModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i9.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i9.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<_i9.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<_i9.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<_i9.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<_i9.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<_i9.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i9.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i9.Response>);
  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i11.Future<_i18.Uint8List>);
  @override
  _i11.Future<_i9.StreamedResponse> send(_i9.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i9.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i9.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
